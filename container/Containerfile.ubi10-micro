ARG UBI_IMAGE=registry.access.redhat.com/ubi10/ubi:10.0
ARG UBI_IMAGE_MICRO=registry.access.redhat.com/ubi10/ubi-micro:10.0

FROM ${UBI_IMAGE_MICRO} as target

# We don't have to start from scratch and repeate the ubi9 installation
# Just copy the ubi9 image created and add new packages
FROM ${UBI_IMAGE} as build

ARG DNF_INSTALL_ROOT="/mnt/rootfs"

ARG DNF_OPTS="--setopt install_weak_deps=false --nodocs"
ARG DNF_OPTS_ROOT="-y --installroot ${DNF_INSTALL_ROOT}"

ARG PACKAGES="httpd-core mod_ssl"

RUN mkdir -p ${DNF_INSTALL_ROOT}
COPY --from=target / ${DNF_INSTALL_ROOT}/

RUN dnf ${DNF_OPTS_ROOT} ${DNF_OPTS} install ${PACKAGES} && \
    dnf ${DNF_OPTS_ROOT} clean all && \
    rm -rf ${DNF_INSTALL_ROOT}/var/cache/* ${DNF_INSTALL_ROOT}/var/log/dnf* ${DNF_INSTALL_ROOT}/var/log/yum.*

FROM scratch
# Apache HTTP Server image.
#
# Volumes:
#  * /var/www - Datastore for httpd

ARG DNF_INSTALL_ROOT="/mnt/rootfs"

ENV HTTPD_VERSION=2.4 \
    HTTPD_SHORT_VERSION=24 \
    NAME=httpd

ENV SUMMARY="Platform for running Apache httpd $HTTPD_VERSION or building httpd-based application" \
    DESCRIPTION="Apache httpd $HTTPD_VERSION available as container, is a powerful, efficient, \
and extensible web server. Apache supports a variety of features, many implemented as compiled modules \
which extend the core functionality. \
These can range from server-side programming language support to authentication schemes. \
Virtual hosting allows one Apache installation to serve many different Web sites."

LABEL source="https://github.com/rgordill/httpd-on-openshift" \
      name="Httpd" \
      maintainer="No one yet" \
      vendor="Community" \
      version="1.0" \
      release="1.0" \
      summary="$SUMMARY" \
      description="$DESCRIPTION" \
      io.k8s.description="$DESCRIPTION" \
      io.k8s.display-name="Apache httpd $HTTPD_VERSION" \
      io.openshift.expose-services="8443:https" \
      io.openshift.tags="httpd,httpd-$HTTPD_SHORT_VERSION"

EXPOSE 8443

COPY --from=build ${DNF_INSTALL_ROOT}/ /

# By default we use the modules installed and only secured (https) server
ENV HTTPD_SERVER_ROOT_PATH=/opt/httpd \
    HTTPD_MAIN_CONF_PATH=/opt/httpd/conf \
    HTTPD_MAIN_CONF_MODULES_D_PATH=/opt/httpd/conf.modules.d \
    HTTPD_MAIN_CONF_D_PATH=/opt/httpd/conf.d \
    HTTPD_PREINIT_SCRIPTS_PATH=/opt/httpd/scripts \
    HTTPD_TLS_CERT_PATH=/opt/httpd/tls \
    HTTPD_VAR_RUN=/var/run/httpd \
    HTTPD_DATA_PATH=/var/www \
    HTTPD_LOG_TYPE=combined

WORKDIR ${HOME}

COPY etc/conf ${HTTPD_MAIN_CONF_PATH}
COPY etc/conf.d ${HTTPD_MAIN_CONF_D_PATH}
COPY runtime-scripts ${HTTPD_PREINIT_SCRIPTS_PATH}
COPY bin /opt/httpd/bin/

# Now, we run commands to do the hardening without including them in the final image
RUN --mount=type=bind,rw,source=build-scripts,target=/scripts,relabel=shared \
   set -ex; for f in /scripts/*.sh; do sh "$f"; done

USER 1001

VOLUME ["${HTTPD_DATA_PATH}"]

CMD ["/opt/httpd/bin/run-httpd"]
